// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: foo.proto

package foo

import (
	"context"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	_ "git.code.oa.com/trpc-go/trpc-go/http"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// HelloService defines service
type HelloService interface {
	SayHello(ctx context.Context, req *HelloReq, rsp *HelloRsp) (err error)
}

func HelloService_SayHello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &HelloReq{}
	rsp := &HelloRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(HelloService).SayHello(ctx, reqbody.(*HelloReq), rspbody.(*HelloRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// HelloServer_ServiceDesc descriptor for server.RegisterService
var HelloServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.playground.emptyTest.Hello",
	HandlerType: ((*HelloService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.playground.emptyTest.Hello/SayHello",
			Func: HelloService_SayHello_Handler,
		},
	},
}

// RegisterHelloService register service
func RegisterHelloService(s server.Service, svr HelloService) {
	if err := s.Register(&HelloServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Hello register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// HelloClientProxy defines service client proxy
type HelloClientProxy interface {
	SayHello(ctx context.Context, req *HelloReq, opts ...client.Option) (rsp *HelloRsp, err error)
}

type HelloClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewHelloClientProxy = func(opts ...client.Option) HelloClientProxy {
	return &HelloClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *HelloClientProxyImpl) SayHello(ctx context.Context, req *HelloReq, opts ...client.Option) (rsp *HelloRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.playground.emptyTest.Hello/SayHello")
	msg.WithCalleeServiceName(HelloServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("playground")
	msg.WithCalleeServer("emptyTest")
	msg.WithCalleeService("Hello")
	msg.WithCalleeMethod("SayHello")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp = &HelloRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}
